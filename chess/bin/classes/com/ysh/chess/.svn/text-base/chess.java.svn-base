package com.ysh.chess;

import java.util.Timer;
import java.util.TimerTask;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.Window;
import android.view.WindowManager;
import android.os.Handler;
import android.os.Message;
import android.os.Vibrator;
import android.media.MediaPlayer;
import android.media.AudioManager;
import android.media.SoundPool;

public class chess extends Activity {

	static
    {
      //加载ffmpeg相关库的顺序不能颠倒
		System.loadLibrary("ai");
		//System.loadLibrary("stlport_shared");
		System.loadLibrary("chesscore");
		System.loadLibrary("androidchess");
    }
	
	private chessBegin begin_view;
	
	private TimerTask task;
	private Timer timer;
	private Handler handler;
	
	private SoundPool notifySound;   
	private int moveSoundId;
	private int eatSoundId;
	private int selectSoundId;
	private int checkSoundId;
	
	private MediaPlayer startSound;
	private Vibrator vb;
	
    public int screenWidth;//屏幕的宽
    public int screenHeight;//屏幕的高
     /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	
    	Thread.setDefaultUncaughtExceptionHandler(new CustomExceptionHandler());
    	super.onCreate(savedInstanceState);
   
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);

	    DisplayMetrics dm=new DisplayMetrics();
	    dm=getApplicationContext().getResources().getDisplayMetrics();
	    screenWidth=dm.widthPixels;
	    screenHeight=dm.heightPixels;
	    
        ChessView chess_view=new ChessView(this);
                 
        timer=new Timer();//定时器用来延迟显示Logo界面
        begin_view=new chessBegin(this);
        handler=new Handler(){
    		public void handleMessage(Message msg){
    			switch(msg.what){
    			case 1: 
    		 	    setContentView(begin_view);//进入游戏界面
    				break;
    			}
    			super.handleMessage(msg);
    		}
       	};
       	
       	task=new TimerTask(){
     		public void run(){
     			Message message=new Message();
     			message.what=1;
     			handler.sendMessage(message);
     		}
     	};
        
     	notifySound=new SoundPool(2,AudioManager.STREAM_MUSIC,0);
     	
     	moveSoundId=notifySound.load(this, R.raw.s_move,1);
     	eatSoundId=notifySound.load(this, R.raw.s_eat,1);
     	selectSoundId=notifySound.load(this, R.raw.s_selected,1);
     	checkSoundId=notifySound.load(this, R.raw.s_check,1);
     	  	
        startSound=MediaPlayer.create(this, R.raw.s_start);
        
    	//初始化Logo界面    
        setContentView(chess_view);//进入Logo界面
               
        timer.schedule(task,3000);//3秒后进入游戏界面
       
       
    }
    
    /* soundType:
       1: 播放棋子走步声音
       2：播放吃子声音
       3：播放棋子选中声音
       4：播放将军声音
       5：播放开始声音
       6: 震动
      */
    public void playSound(int soundType){
    	switch(soundType){
    	case 1:
    		notifySound.play(moveSoundId,1,1,1,0,1);
    		break;
    	case 2:
    		notifySound.play(eatSoundId, 1, 1, 1, 0, 1);
    		break;
    	case 3:
    		notifySound.play(selectSoundId, 1, 1, 1, 0, 1);
    		break;
    	case 4:
    		notifySound.play(checkSoundId, 1, 1, 1, 0, 1);
    		break;
    	case 5:
    		startSound.start();
    		break;
    	case 6:
    		vb=(Vibrator)getSystemService(VIBRATOR_SERVICE);  		
    		vb.vibrate(300);
    		break;
     	
    	}  
    	
    }
    

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if(event.getAction()==KeyEvent.ACTION_DOWN){
			
			if(keyCode==KeyEvent.KEYCODE_BACK){

				new AlertDialog.Builder(this)
				.setOnKeyListener(new DialogInterface.OnKeyListener(){

					@Override
					public boolean onKey(DialogInterface dialog, int keyCode,
							KeyEvent event) {
						// TODO Auto-generated method stub
						if(event.getAction()==KeyEvent.ACTION_DOWN){
							if(keyCode==KeyEvent.KEYCODE_BACK)
								exitGame();
						}
						return false;
					}
					
				})
				.setMessage(R.string.quitMsg)
				.setPositiveButton(R.string.confirm,new DialogInterface.OnClickListener() {					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub	
						  exitGame();				
					}
				})
				.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {				
					@Override
					public void onClick(DialogInterface dialog, int which) {
				
						// TODO Auto-generated method stub
						
					}
				})
				.show();
				
			}
			
		}
		return super.onKeyDown(keyCode, event);
		
	}
	public void exitGame(){
		if(begin_view.getChessBoard()!=null){
			if(begin_view.getChessBoard().gameType==GAMETYPE.ONLINEGAME){
				begin_view.getChessBoard().getnServer().exitGame();
				begin_view.getChessBoard().getnServer().exitRoom();
				begin_view.getChessBoard().getnServer().doUnbindService();
			}
		}
		
		finish();
	}
	
    
    @Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
    	menu.add("举手");
		return super.onCreateOptionsMenu(menu);
	}
    
    

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		if(item.getItemId()==0){
			if(begin_view.getChessBoard().gameType==GAMETYPE.ONLINEGAME)
			    begin_view.getChessBoard().getnServer().gameReady();
				begin_view.getChessBoard().SetReadyTimer(false);
		}
		return super.onOptionsItemSelected(item);
	}
	
	
	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		
		super.onDestroy();
		System.exit(0);
	}
	
	public Bitmap zoomImage(Bitmap src_image,int width,int height) 
	{   
		if(screenHeight == 480 && screenWidth == 800)
		{
			return src_image;
		}
		else
		{
			return Bitmap.createScaledBitmap(src_image, width, height, true);
		}
	}
	
	public int checkNetworkType() 
	{
		/*
		网络连接类型：
		(低16位) 
		#define UNKNOWN_NET   	0x00000000
		#define CHINA_MOBILE  	0x00000001
		#define CHINA_UNICOM  	0x00000002
		#define CHINA_TELECOM 	0x00000004
		#define OTHER_NET     	0x00008000
		// (高16位) 
		#define NT_GPRS_WAP   	0x00010000
		#define NT_GPRS_NET   	0x00020000
		#define NT_3G         	0x00040000
		#define NT_WLAN       	0x00080000   // wifi and lan ...

		#define NT_CMWAP 	(NT_GPRS_WAP|CHINA_MOBILE)
		#define NT_CMNET 	(NT_GPRS_NET|CHINA_MOBILE)

		#define NT_CUIWAP 	(NT_GPRS_WAP|CHINA_UNICOM)
		#define NT_CUINET 	(NT_GPRS_NET|CHINA_UNICOM)
		*/
		int net_type = 0;
		ConnectivityManager connectivity = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);
    	if (connectivity == null) 
    	{
            //Log.e(Constants.TAG, "获取网络类型失败");
            return net_type;
        } 
    	else 
    	{
            NetworkInfo info = connectivity.getActiveNetworkInfo();
            if(info == null) 
            {
            	//Log.e(Constants.TAG, "获取网络类型失败");
            	return net_type;
            }
            
            if (info.getType() == ConnectivityManager.TYPE_MOBILE) 
            {
            	TelephonyManager tm = (TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
                int type = tm.getNetworkType();
                //int p_type = tm.getPhoneType();
                //int sim_state = tm.getSimState();
                /*
                String phone_num = tm.getLine1Number();  //获取手机号码
                String my_info = tm.getDeviceSoftwareVersion();
                my_info+=",";
                my_info+=tm.getNetworkCountryIso();
                my_info+=",";
                my_info+=tm.getNetworkOperator();
                my_info+=",";
                my_info+=tm.getNetworkOperatorName();
                my_info+=",";
                my_info+=tm.getNetworkCountryIso();
                my_info+=",";
                my_info+=tm.getSimCountryIso();
                my_info+=",";
                my_info+=tm.getSimOperator();
                my_info+=",";
                my_info+=tm.getSimOperatorName();
                my_info+=",";
                my_info+=tm.getSimSerialNumber();
                 */
               
                String phone_IMSI = tm.getSubscriberId();
            	String proxyHost = android.net.Proxy.getDefaultHost(); 
            	//int proxyPort = android.net.Proxy.getDefaultPort();
                if(phone_IMSI.startsWith("460", 0))
                {
                	//China
                    if(phone_IMSI.startsWith("00", 3)||phone_IMSI.startsWith("02", 3))
                    {
                    	// China Mobile 
                    	net_type = 0x00000001;
                        if (proxyHost != null) 
                        {        
                        	// CMWAP
                        	net_type|=0x00010000;
                        }
                        else
                        {
                        	//CMNET
                           	net_type|=0x00020000;
                        }
                    }  
                    else
                    if(phone_IMSI.startsWith("01", 3))
                    {
                    	// China Unicom GSM
                    	net_type = 0x00000002;
                        if (proxyHost != null) 
                        {       
                        	// WAP
                        	net_type|=0x00010000;
                        }
                        else
                        {
                        	if(type == TelephonyManager.NETWORK_TYPE_UMTS)
                        	{
                        		// 3gnet
                        		net_type|=0x00040000;
                        	}
                        	else
                        	{
                        		// uninet
                        		net_type|=0x00020000;
                        	}
                        }
                    }  
                    else
                    if(phone_IMSI.startsWith("03", 3))
                    {
                    	// China Telecom CDMA
                    	net_type = 0x00000004;
                        if (proxyHost != null) 
                        {         
                        	//WAP
                        	net_type|=0x00010000;
                        }
                        else
                        {
                        	//3GNET
                           	net_type|=0x00040000;
                        }
                    }  
                }
                else
                {
                	net_type = 0x00008000;
                    if (proxyHost != null) 
                    {       
                    	// WAP
                    	net_type|=0x00010000;
                    }
                    else
                    {
                    	if(type == TelephonyManager.NETWORK_TYPE_UMTS)
                    	{
                    		// 3gnet
                    		net_type|=0x00040000;
                    	}
                    	else
                    	{
                    		// 2gnet
                    		net_type|=0x00020000;
                    	}
                    }
                }
                /*
            	switch (type) 
            	{
				case TelephonyManager.NETWORK_TYPE_EDGE:
					//Log.d(Constants.TAG, "网络类型为EDGE");
					net_type = 1;
					break;
				case TelephonyManager.NETWORK_TYPE_GPRS:
					//Log.d(Constants.TAG, "网络类型为GPRS");
					net_type = 2;
					break;
				case TelephonyManager.NETWORK_TYPE_UMTS:
					//Log.d(Constants.TAG, "网络类型为UMTS");
					net_type = 3;
					break;
				case TelephonyManager.NETWORK_TYPE_UNKNOWN:
					//Log.d(Constants.TAG, "网络类型未知");
					net_type = 4;
					break;
				}
				*/
            } 
            else if (info.getType() == ConnectivityManager.TYPE_WIFI)
            {
            	//Log.d(Constants.TAG, "网络类型为WIFI");
            	net_type = 0x00080000;
            }
        }
    	return net_type;
    }
}

